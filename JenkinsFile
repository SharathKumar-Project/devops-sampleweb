pipeline {
    agent { label "worker_node" } 

    stages {
        stage ('Checkout') {
            steps {
                checkout ([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']],
                    userRemoteConfigs: [[
                       url: 'https://github.com/SharathKumar-Project/devops-sampleweb.git',
                       credentialsId: 'github_token'
                    ]]
                ])
            }
        }

        stage ('Build') {
            steps {
                sh 'mvn clean install'
            }
        }

        stage  ('Test') {
            steps {
                sh 'mvn test'
            }
        }

       stage ('Deploy to Artifactory') {
            steps {
                configFileProvider([configFile(fileId: 'd1cd799f-298c-4a03-9b2a-69b5dbb12ef4', variable: 'MAVEN_SETTINGS'
                )]) {
                    sh 'mvn deploy -s $MAVEN_SETTINGS'
                }
            }
        }

       stage('Download Latest SNAPSHOT WAR and Deploy') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'jfrog_pass', usernameVariable: 'ART_USER', passwordVariable: 'ART_PASS')]) {
                    script {
                        def baseUrl = "http://3.86.84.96:8081/artifactory/libs-snapshot-local"
                        def groupPath = "com/example/sample-webapp"
                        def artifactId = "sample-webapp"
                        def version = "1.2-SNAPSHOT"

                        def metadataUrl = "${baseUrl}/${groupPath}/${version}/maven-metadata.xml"

                        sh """
                            set -e

                            echo "Fetching Maven metadata..."
                            curl -u $ART_USER:$ART_PASS -s ${metadataUrl} -o metadata.xml

                            echo "Parsing metadata to find latest SNAPSHOT WAR..."
                            TIMESTAMP=\$(grep -oPm1 '(?<=<timestamp>)[^<]+' metadata.xml)
                            BUILDNUM=\$(grep -oPm1 '(?<=<buildNumber>)[^<]+' metadata.xml)

                            echo "Timestamp: \$TIMESTAMP"
                            echo "Build number: \$BUILDNUM"

                            WAR_NAME=${artifactId}-1.2-\${TIMESTAMP}-\${BUILDNUM}.war
                            ARTIFACT_URL=${baseUrl}/${groupPath}/${version}/\$WAR_NAME

                            echo "Downloading WAR from: \$ARTIFACT_URL"
                            curl -u $ART_USER:$ART_PASS -o /tmp/\$WAR_NAME \$ARTIFACT_URL

                            echo "Stopping Tomcat..."
                            sudo /usr/tomcat/tomcat10/bin/shutdown.sh || echo 'Tomcat may already be stopped'

                            echo "Cleaning old WAR..."
                            sudo rm -f /usr/tomcat/tomcat10/webapps/sample-webapp.war

                            echo "Copying new WAR to Tomcat webapps..."
                            sudo cp /tmp/\$WAR_NAME /usr/tomcat/tomcat10/webapps/sample-webapp.war

                            echo "Starting Tomcat..."
                            sudo /usr/tomcat/tomcat10/bin/startup.sh || echo 'Tomcat startup might need manual check'

                            echo "Deployment completed successfully."
                        """
                    }
                }
            }
        }
    }
} 